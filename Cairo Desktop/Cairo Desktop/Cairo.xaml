<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/netfx/2009/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="CairoDesktop.Cairo"
    xmlns:cairo="clr-namespace:CairoDesktop" xmlns:l10n="clr-namespace:CairoDesktop.Localization;assembly=CairoDesktop.Localization">
    <!-- Menu resources -->
    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="MenuBarBackground">
        <GradientStop Color="#CF000000" Offset="0.0" />
        <GradientStop Color="#8F4a4a4a" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="MenuBackgroundGradient">
        <GradientStop Color="#cF0f0f0f" Offset="0" />
        <GradientStop Color="#bf1a1a1a" Offset="0.8" />
        <GradientStop Color="#cF0f0f0f" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="MenuItemHoverGradient">
        <GradientStop Color="#DF338FFF" Offset="0.0" />
        <GradientStop Color="#8F1A4DFF" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="MenuHeaderPressedGradient">
        <GradientStop Color="#8F1A4DB5" Offset="0.0" />
        <GradientStop Color="#DF338FFF" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgramsMenuCategoryHoverBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#30FFFFFF" Offset="0.0" />
        <GradientStop Color="#01FFFFFF" Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush Color="#FFFFFFFF" x:Key="MenuHeaderForeground" />
    <SolidColorBrush Color="#FFFFFFFF" x:Key="MenuItemForeground" />
    <SolidColorBrush Color="#FF12367F" x:Key="MenuTopBorderBrush" />
    <SolidColorBrush Color="#AF5b5b5b" x:Key="MenuBorderBrush" />
    <SolidColorBrush Color="#FF9a9a9a" x:Key="ProgramsMenuCategoryForeground" />
    <SolidColorBrush Color="#40FFFFFF" x:Key="MenuSeparator" />
    <SolidColorBrush Color="#FFFFFFFF" x:Key="SysTrayExpanderColor" />
    <SolidColorBrush Color="#AF707070" x:Key="MenuBarBorder" />
    <RadialGradientBrush x:Key="MenuHeaderHoverBackground" Center="0.5,1" GradientOrigin="0.5,1">
        <GradientStop Color="#33FFFFFF" Offset="0.0" />
        <GradientStop Color="#00FFFFFF" Offset="1.0" />
    </RadialGradientBrush>
    <DropShadowEffect x:Key="MenuShadow" Color="Black" ShadowDepth="4" Direction="270" Opacity="0.6" BlurRadius="10" />
    <DropShadowEffect Color="Black" x:Key="MenuHeaderShadow" ShadowDepth="1" Direction="90" Opacity="0.6" BlurRadius="0" />
    
    <!-- Search resources -->
    <SolidColorBrush Color="#FFFFFFFF" x:Key="SearchTitleText" />
    <SolidColorBrush Color="#FF000000" x:Key="SearchResultText" />
    <SolidColorBrush Color="#FF808080" x:Key="SearchResultSubtext" />
    <SolidColorBrush Color="#FFEEEEEE" x:Key="SearchResultBackground0" />
    <SolidColorBrush Color="#FFFFFFFF" x:Key="SearchResultBackground1" />
    <SolidColorBrush Color="#ffc4dff2" x:Key="SearchResultHover" />
    <LinearGradientBrush x:Key="SearchTitleBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FF252326" Offset="0" />
        <GradientStop Color="#FF020200" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SearchViewAllResultsBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FF569fd1" Offset="0.0" />
        <GradientStop Color="#FF0073bc" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SearchViewAllResultsHoverBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#ff5fb1ea" Offset="0.0" />
        <GradientStop Color="#ff0185d7" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SearchViewAllResultsPressedBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#ff4b8bb8" Offset="0.0" />
        <GradientStop Color="#ff0164a2" Offset="1.0" />
    </LinearGradientBrush>

    <!-- Folder view resources -->
    <SolidColorBrush Color="#FFFFFFFF" x:Key="DesktopIconText" />
    <SolidColorBrush Color="#FFFFFFFF" x:Key="StacksIconText" />
    <LinearGradientBrush x:Key="DesktopHoverBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#44282828" Offset="0.0" />
        <GradientStop Color="#44333333" Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush Color="#44FFFFFF" x:Key="DesktopHoverTopBorder" />
    <SolidColorBrush Color="#77282828" x:Key="DesktopHoverBottomBorder" />
    <SolidColorBrush Color="#70333333" x:Key="DesktopPressedBackground" />
    <SolidColorBrush Color="#60FFFFFF" x:Key="DesktopPressedTopBorder" />
    <SolidColorBrush Color="#99282828" x:Key="DesktopPressedBottomBorder" />

    <!-- Taskbar resources -->
    <LinearGradientBrush x:Key="TaskbarBottomBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#AF1d1d1d" Offset="0.0" />
        <GradientStop Color="#DF050505" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarBottomBorder" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#C07b7b7b" Offset="0.0" />
        <GradientStop Color="#C0595959" Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush Color="#9F2a2a2a" x:Key="TaskbarTopBackground" />
    <SolidColorBrush Color="#AF707070" x:Key="TaskbarTopBorder" />
    <SolidColorBrush Color="#77000000" x:Key="TaskGroupBorder" />
    <LinearGradientBrush x:Key="TaskbarItemInactiveBackground" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#3AFFFFFF" Offset="1.0" />
        <GradientStop Color="#00FFFFFF" Offset="0.65" />
        <GradientStop Color="#00FFFFFF" Offset="0.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemInactiveBorder" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#4FFFFFFF" Offset="1" />
        <GradientStop Color="#2FFFFFFF" Offset="0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemInactiveHoverBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#EF0057a8" Offset="1.0" />
        <GradientStop Color="#4F0054C9" Offset="0.35" />
        <GradientStop Color="#55FFFFFF" Offset="0.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemInactiveHoverBorder" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#8F83b8e9" Offset="1" />
        <GradientStop Color="#DF0f82c2" Offset="0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemInactivePressedBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FF0057a8" Offset="1.0" />
        <GradientStop Color="#6F0054C9" Offset="0.35" />
        <GradientStop Color="#55FFFFFF" Offset="0.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemActiveBackground" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#55FFFFFF" Offset="1.0" />
        <GradientStop Color="#20FFFFFF" Offset="0.65" />
        <GradientStop Color="#40ffffff" Offset="0.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemActiveBorder" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#8FFFFFFF" Offset="1" />
        <GradientStop Color="#5FFFFFFF" Offset="0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemActiveHoverBackground" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#65FFFFFF" Offset="1.0" />
        <GradientStop Color="#30FFFFFF" Offset="0.65" />
        <GradientStop Color="#43FFFFFF" Offset="0.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemActivePressedBackground" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#75FFFFFF" Offset="1.0" />
        <GradientStop Color="#40FFFFFF" Offset="0.65" />
        <GradientStop Color="#53FFFFFF" Offset="0.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemFlashingBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#AFF6BA31" Offset="1.0" />
        <GradientStop Color="#5fff5400" Offset="0.35" />
        <GradientStop Color="#55FFFFFF" Offset="0.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemFlashingBorder" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#8Fcb7900" Offset="0.0" />
        <GradientStop Color="#FFcb7900" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemFlashingDisabledBackground" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#CFDBA715" Offset="1.0" />
        <GradientStop Color="#8FDB570B" Offset="0.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemFlashingHoverBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#BFF6BA31" Offset="1.0" />
        <GradientStop Color="#6fff5400" Offset="0.3" />
        <GradientStop Color="#5FFFFFFF" Offset="0.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TaskbarItemFlashingPressedBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#CFF6BA31" Offset="1.0" />
        <GradientStop Color="#7fff5400" Offset="0.3" />
        <GradientStop Color="#65FFFFFF" Offset="0.0" />
    </LinearGradientBrush>
    <Storyboard x:Key="TaskbarFlashPulseCycle" AutoReverse="True" RepeatBehavior="Forever">
        <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" AccelerationRatio="0.2" DecelerationRatio="0.2">
            <SplineColorKeyFrame KeyTime="00:00:00" Value="#5FFF5400"/>
            <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#00000000"/>
        </ColorAnimationUsingKeyFrames>
        <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)" AccelerationRatio="0.2" DecelerationRatio="0.2">
            <SplineColorKeyFrame KeyTime="00:00:00" Value="#AFF6BA31"/>
            <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#00000000"/>
        </ColorAnimationUsingKeyFrames>
        <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)" AccelerationRatio="0.2" DecelerationRatio="0.2">
            <SplineColorKeyFrame KeyTime="00:00:00" Value="#55FFFFFF"/>
            <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#3affffff"/>
        </ColorAnimationUsingKeyFrames>
    </Storyboard>

    <!-- Image resources -->
    <BitmapImage x:Key="MenuIcon" UriSource="Resources\cairoMenuDefault.png"></BitmapImage>
    <BitmapImage x:Key="SearchIcon" UriSource="Resources\searchDefault.png"></BitmapImage>
    <BitmapImage x:Key="ActionCenterIcon" UriSource="Resources\actionCenterDefault.png"></BitmapImage>
    <BitmapImage x:Key="VolumeIcon" UriSource="Resources\volumeIconDefault.png"></BitmapImage>
    <BitmapImage x:Key="VolumeLowIcon" UriSource="Resources\volumeLowIconDefault.png"></BitmapImage>
    <BitmapImage x:Key="VolumeOffIcon" UriSource="Resources\volumeOffIconDefault.png"></BitmapImage>
    <BitmapImage x:Key="VolumeMuteIcon" UriSource="Resources\volumeMuteIconDefault.png"></BitmapImage>
    <BitmapImage x:Key="MenubarShadow" UriSource="Resources\menubarShadow.png"></BitmapImage>
    <BitmapImage x:Key="NullIcon" UriSource="Resources\nullIcon.png"></BitmapImage>
    
    <Style TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid Margin="3 2">
                        <Border Name="border"
                            Width="{TemplateBinding ActualWidth}"
                            Height="{TemplateBinding ActualHeight}"
                            CornerRadius="2"
                            BorderThickness="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NoItemsTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="#FF9a9a9a" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0" />
    </Style>

    <!-- Main menu bar -->
    <Style x:Key="MenuBarWindowStyle"
        TargetType="{x:Type Window}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=MenuBarBorder}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="MenuBarStyle"
        TargetType="{x:Type DockPanel}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuBarBackground}" />
    </Style>
    <Style x:Key="CairoMenuBarMainContainerStyle"
        TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle"
            Value="True" />
        <Setter Property="UseLayoutRounding"
            Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="Transparent"
                        BorderThickness="0"
                        Margin="0"
                        Padding="0">
                        <StackPanel ClipToBounds="True"
                            Orientation="Horizontal"
                            IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoMenuItemStyle"
        TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=MenuItemForeground}" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                        Background="Transparent"
                        BorderBrush="Transparent">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0"
                                    MinWidth="17"
                                    Width="Auto"
                                    SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="Auto"
                                    SharedSizeGroup="MenuTextColumnGroup" />
                                <ColumnDefinition Width="Auto"
                                    SharedSizeGroup="MenuItemIGTColumnGroup" />
                                <ColumnDefinition x:Name="Col3"
                                    Width="14" />
                            </Grid.ColumnDefinitions>
                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Grid.Column="0"
                                Margin="8,0,6,0"
                                x:Name="Icon"
                                VerticalAlignment="Center"
                                ContentSource="Icon" />
                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Grid.Column="0"
                                Visibility="Hidden"
                                Margin="4,0,6,0"
                                x:Name="GlyphPanel"
                                VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath"
                                    VerticalAlignment="Center"
                                    Fill="{TemplateBinding Foreground}"
                                    Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"
                                    FlowDirection="LeftToRight" />
                            </Grid>
                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                x:Name="HeaderHost"
                                RecognizesAccessKey="True"
                                ContentSource="Header" />
                            <!-- Content for the menu IGT -->
                            <ContentPresenter Grid.Column="2"
                                Margin="8,1,8,1"
                                x:Name="IGTHost"
                                ContentSource="InputGestureText"
                                VerticalAlignment="Center" />
                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3"
                                Margin="4,0,6,0"
                                x:Name="ArrowPanel"
                                VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    Fill="{TemplateBinding Foreground}"
                                    Data="M0,0 L0,8 L4,4 z" />
                            </Grid>
                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                Placement="Right"
                                x:Name="SubMenuPopup"
                                Focusable="false"
                                PopupAnimation="Fade"
                                AllowsTransparency="True">
                                <Border x:Name="SubMenuBorderTop">
                                    <Border.Style>
                                        <Style TargetType="{x:Type Border}">
                                            <Setter Property="BorderBrush"
                                                Value="{DynamicResource ResourceKey=MenuTopBorderBrush}" />
                                            <Setter Property="BorderThickness"
                                                Value="0,1,0,0" />
                                            <Setter Property="Margin"
                                                    Value="5,0,5,11" />
                                            <Setter Property="Effect"
                                                Value="{DynamicResource ResourceKey=MenuShadow}" />
                                        </Style>
                                    </Border.Style>
                                    <Border x:Name="SubMenuBorder">
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuBackgroundGradient}" />
                                                <Setter Property="BorderBrush"
                                                    Value="{DynamicResource ResourceKey=MenuBorderBrush}" />
                                                <Setter Property="BorderThickness"
                                                    Value="1,0,1,1" />
                                                <Setter Property="CornerRadius"
                                                    Value="0,0,5,5" />
                                                <Setter Property="Padding"
                                                    Value="0,3,0,3" />
                                            </Style>
                                        </Border.Style>
                                        <Grid x:Name="SubMenu"
                                            Grid.IsSharedSizeScope="True">
                                            <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                            <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Grid>
                                    </Border>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role"
                            Value="TopLevelHeader">
                            <Setter Property="Padding"
                                Value="13,1,13,0" />
                            <Setter Property="Margin"
                                Value="0,-2,0,0" />
                            <Setter Property="Placement"
                                Value="Bottom"
                                TargetName="SubMenuPopup" />
                            <Setter Property="MinWidth"
                                Value="0"
                                TargetName="Col0" />
                            <Setter Property="Width"
                                Value="Auto"
                                TargetName="Col3" />
                            <Setter Property="Height"
                                Value="22" />
                            <Setter Property="FontSize"
                                Value="14" />
                            <Setter Property="Visibility"
                                Value="Collapsed"
                                TargetName="Icon" />
                            <Setter Property="Visibility"
                                Value="Collapsed"
                                TargetName="GlyphPanel" />
                            <Setter Property="Visibility"
                                Value="Collapsed"
                                TargetName="IGTHost" />
                            <Setter Property="Visibility"
                                Value="Collapsed"
                                TargetName="ArrowPanel" />
                            <Setter Property="Effect" Value="{DynamicResource ResourceKey=MenuHeaderShadow}" />
                            <Setter Property="Foreground"
                                Value="{DynamicResource ResourceKey=MenuHeaderForeground}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="TopLevelHeader" />
                                <Condition Property="IsMouseOver"
                                    Value="True" />
                                <Condition Property="IsSubmenuOpen"
                                    Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderHoverBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="TopLevelHeader" />
                                <Condition Property="IsSubmenuOpen"
                                    Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderPressedGradient}" />
                            <Setter Property="Foreground"
                                Value="{DynamicResource ResourceKey=MenuItemForeground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="TopLevelItem" />
                                <Condition Property="IsMouseOver"
                                    Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuItemHoverGradient}"/>
                        </MultiTrigger>
                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role"
                            Value="TopLevelItem">
                            <Setter Property="Padding"
                                Value="0,3,0,0" />
                            <Setter Property="Visibility"
                                Value="Collapsed"
                                TargetName="ArrowPanel" />
                            <Setter Property="MinHeight"
                                Value="24" />
                            <Setter Property="Foreground"
                                Value="{DynamicResource ResourceKey=MenuItemForeground}" />
                            <Setter Property="FontSize"
                                Value="12" />
                            <Setter Property="FontFamily"
                                Value="Segoe UI" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="SubMenuHeader" />
                                <Condition Property="IsMouseOver"
                                    Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuItemHoverGradient}"/>
                        </MultiTrigger>
                        <!-- Role = SubMenuHeader : this is a child menu item which has children -->
                        <Trigger Property="Role"
                            Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock"
                                Value="Top" />
                            <Setter Property="Padding"
                                Value="0,3,0,0" />
                            <Setter Property="MinHeight"
                                Value="24" />
                            <Setter Property="Foreground"
                                Value="{DynamicResource ResourceKey=MenuItemForeground}" />
                            <Setter Property="FontSize"
                                Value="12" />
                            <Setter Property="FontFamily"
                                Value="Segoe UI" />
                            <Setter Property="BorderThickness"
                                TargetName="SubMenuBorderTop" Value="0" />
                            <Setter Property="BorderThickness"
                                TargetName="SubMenuBorder" Value="1" />
                            <Setter Property="CornerRadius"
                                TargetName="SubMenuBorder" Value="5" />
                            <Setter Property="VerticalOffset"
                                TargetName="SubMenuPopup" Value="-4" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="SubMenuItem" />
                                <Condition Property="IsMouseOver"
                                    Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuItemHoverGradient}"/>
                        </MultiTrigger>
                        <!-- Role = SubMenuItem : this is a child menu item which does not have children-->
                        <Trigger Property="Role"
                            Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock"
                                Value="Top" />
                            <Setter Property="Padding"
                                Value="0,3,0,0" />
                            <Setter Property="Visibility"
                                Value="Collapsed"
                                TargetName="ArrowPanel" />
                            <Setter Property="MinHeight"
                                Value="24" />
                            <Setter Property="Foreground"
                                Value="{DynamicResource ResourceKey=MenuItemForeground}" />
                            <Setter Property="FontSize"
                                Value="12" />
                            <Setter Property="FontFamily"
                                Value="Segoe UI" />
                        </Trigger>
                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon"
                            Value="{x:Null}">
                            <Setter Property="Visibility"
                                Value="Collapsed"
                                TargetName="Icon" />
                        </Trigger>
                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked"
                            Value="true">
                            <Setter Property="Visibility"
                                Value="Visible"
                                TargetName="GlyphPanel" />
                            <Setter Property="Visibility"
                                Value="Collapsed"
                                TargetName="Icon" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoMenuItemCairoMenuStyle"
        TargetType="{x:Type MenuItem}" BasedOn="{StaticResource CairoMenuItemStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="ContainerBorder" Background="Transparent" BorderBrush="Transparent" Padding="13,0,0,0">
                        <Border x:Name="Border">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup" />
                                </Grid.ColumnDefinitions>
                                <!-- Content for the menu text etc -->
                                <ContentPresenter Grid.Column="0" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" />
                                <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                Placement="Right"
                                x:Name="SubMenuPopup"
                                Focusable="false"
                                PopupAnimation="Fade"
                                AllowsTransparency="True">
                                    <Border x:Name="SubMenuBorderTop" Margin="11,0,5,11">
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="BorderBrush"
                                                Value="{DynamicResource ResourceKey=MenuTopBorderBrush}" />
                                                <Setter Property="BorderThickness"
                                                Value="0,1,0,0" />
                                                <Setter Property="Effect"
                                                Value="{DynamicResource ResourceKey=MenuShadow}" />
                                            </Style>
                                        </Border.Style>
                                        <Border x:Name="SubMenuBorder">
                                            <Border.Style>
                                                <Style TargetType="{x:Type Border}">
                                                    <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuBackgroundGradient}" />
                                                    <Setter Property="BorderBrush"
                                                    Value="{DynamicResource ResourceKey=MenuBorderBrush}" />
                                                    <Setter Property="BorderThickness"
                                                    Value="1,0,1,1" />
                                                    <Setter Property="CornerRadius"
                                                    Value="0,0,5,5" />
                                                    <Setter Property="Padding"
                                                    Value="0,3,0,3" />
                                                </Style>
                                            </Border.Style>
                                            <Grid x:Name="SubMenu"
                                            Grid.IsSharedSizeScope="True">
                                                <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                                            </Grid>
                                        </Border>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                    </Border>
                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role"
                            Value="TopLevelHeader">
                            <Setter Property="Padding"
                                Value="2,0,2,0" />
                            <Setter Property="Margin"
                                Value="0,-2,0,0" />
                            <Setter Property="Placement"
                                Value="Bottom"
                                TargetName="SubMenuPopup" />
                            <Setter Property="Height"
                                Value="22" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="TopLevelHeader" />
                                <Condition Property="IsMouseOver"
                                    Value="True" />
                                <Condition Property="IsSubmenuOpen"
                                    Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderHoverBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                Value="TopLevelHeader" />
                                <Condition Property="IsSubmenuOpen"
                                Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderPressedGradient}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoMenuItemButtonMenuStyle"
        TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground"
            Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="Margin" Value="0,-2,0,0" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="ContainerBorder" Background="Transparent" BorderBrush="Transparent" Padding="0">
                        <Border x:Name="Border">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup" />
                                </Grid.ColumnDefinitions>
                                <!-- Content for the menu text etc -->
                                <ContentPresenter Grid.Column="0" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" />
                            </Grid>
                        </Border>
                    </Border>
                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                    Value="True" />
                                <Condition Property="IsSubmenuOpen"
                                    Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderHoverBackground}"/>
                        </MultiTrigger>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderPressedGradient}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoMenuItemCairoSearchMenuStyle"
        TargetType="{x:Type MenuItem}" BasedOn="{StaticResource CairoMenuItemStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="ContainerBorder" Background="Transparent" BorderBrush="Transparent" Padding="0,0,13,0">
                        <Border x:Name="Border">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup" />
                                </Grid.ColumnDefinitions>
                                <!-- Content for the menu text etc -->
                                <ContentPresenter Grid.Column="0" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" />
                                <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                Placement="Left"
                                x:Name="SubMenuPopup"
                                Focusable="False"
                                PopupAnimation="Fade"
                                AllowsTransparency="True">
                                    <Border Margin="5,0,13,11">
                                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="BorderBrush"
                                                Value="{DynamicResource ResourceKey=MenuTopBorderBrush}" />
                                                <Setter Property="BorderThickness"
                                                Value="0,1,0,0" />
                                                <Setter Property="Effect"
                                                Value="{DynamicResource ResourceKey=MenuShadow}" />
                                            </Style>
                                        </Border.Style>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                    </Border>
                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role"
                            Value="TopLevelHeader">
                            <Setter Property="Padding"
                                Value="2,0,2,0" />
                            <Setter Property="Margin"
                                Value="0,-2,0,0" />
                            <Setter Property="Placement"
                                Value="Bottom"
                                TargetName="SubMenuPopup" />
                            <Setter Property="Height"
                                Value="22" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="TopLevelHeader" />
                                <Condition Property="IsMouseOver"
                                    Value="True" />
                                <Condition Property="IsSubmenuOpen"
                                    Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderHoverBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                Value="TopLevelHeader" />
                                <Condition Property="IsSubmenuOpen"
                                Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderPressedGradient}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Style for menus that have something other than menuitems -->
    <Style x:Key="CairoMenuItemContainerStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <ContentPresenter x:Name="Header"
                                            ContentSource="Header"
                                            RecognizesAccessKey="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- CairoContextMenuStyle -->
    <Style x:Key="CairoContextMenuStyle"
        TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border>
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuBackgroundGradient}" />
                                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=MenuBorderBrush}" />
                                <Setter Property="BorderThickness" Value="1" />
                                <Setter Property="CornerRadius" Value="5" />
                                <Setter Property="Padding" Value="0,3,0,3" />
                                <Setter Property="Margin" Value="5,0,5,11" />
                                <Setter Property="Effect" Value="{DynamicResource ResourceKey=MenuShadow}" />
                            </Style>
                        </Border.Style>
                        <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                            <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                            <StackPanel IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Separator -->
    <Style x:Key="CairoMenuSeparatorStyle"
        TargetType="{x:Type Separator}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <StackPanel>
                        <Border Width="auto"
                            Height="1"
                            Margin="4,3,4,3"
                            Background="{DynamicResource ResourceKey=MenuSeparator}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Search Results -->
    <Style x:Key="SearchTextBox" TargetType="TextBox">
        <Setter Property="Width" Value="185"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=SearchResultBackground1}" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=SearchResultText}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="SearchTextBoxClearButton" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontFamily" Value="Marlett"/>
        <Setter Property="Height" Value="15"/>
        <Setter Property="Width" Value="15"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=SearchResultText}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                        BorderThickness="0"
                        CornerRadius="7"
                        Background="Transparent">
                        <ContentPresenter Margin="3,3"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=SearchResultBackground0}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=searchStr, Path=Text}" Value="">
                <Setter Property="Visibility" Value="Hidden" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CairoSearchResultsItemStyle"
        TargetType="ListViewItem">
        <Setter Property="Height" Value="60"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ToolTip" Value="{Binding Path=PathDisplay}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border 
                        BorderBrush="Transparent"
                        BorderThickness="0"
                        Background="{TemplateBinding Background}">
                        <MenuItem Command="cairo:CustomCommands.OpenSearchResult" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                            CommandParameter="{Binding}" Header="{Binding}">
                            <MenuItem.HeaderTemplate>
                                <ItemContainerTemplate>
                                    <StackPanel Orientation="Horizontal" Margin="0" HorizontalAlignment="Stretch">
                                        <Image Source="{Binding Path=Icon, Mode=OneWay, FallbackValue={StaticResource NullIcon}, TargetNullValue={StaticResource NullIcon}}"
                                        Height="32"
                                        Width="32" Margin="0,0,10,0" />
                                        <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                                            <TextBlock Foreground="{DynamicResource ResourceKey=SearchResultText}"
                                            FontSize="14"
                                            FontFamily="Segoe UI" Text="{Binding Path=Name}" TextTrimming="CharacterEllipsis" HorizontalAlignment="Left" Width="268" />
                                            <TextBlock 
                                                Foreground="{DynamicResource ResourceKey=SearchResultSubtext}"
                                            FontSize="12"
                                            FontFamily="Segoe UI" Text="{Binding Path=DateModifiedDisplay}" TextTrimming="CharacterEllipsis" HorizontalAlignment="Left" Width="268" />
                                        </StackPanel>
                                    </StackPanel>
                                </ItemContainerTemplate>
                            </MenuItem.HeaderTemplate>
                            <MenuItem.Style>
                                <Style TargetType="{x:Type MenuItem}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type MenuItem}">
                                                <Border BorderThickness="0" Background="Transparent" Name="Border">
                                                    <ContentPresenter Margin="15,0"
                                                        x:Name="HeaderHost"
                                                        RecognizesAccessKey="True"
                                                        ContentSource="Header" />
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Trigger.Setters>
                                                            <Setter Property="Background" Value="{DynamicResource ResourceKey=SearchResultHover}" TargetName="Border" />
                                                        </Trigger.Setters>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex"
                Value="0">
                <Setter Property="Background"
                    Value="{DynamicResource ResourceKey=SearchResultBackground0}"></Setter>
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex"
                Value="1">
                <Setter Property="Background"
                    Value="{DynamicResource ResourceKey=SearchResultBackground1}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- Button Style for View All Results -->
    <Style x:Key="CairoSearchResultsButtonStyle"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=SearchTitleText}" />
        <Setter Property="Height" Value="26" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                        BorderThickness="0" Background="{DynamicResource ResourceKey=SearchViewAllResultsBackground}">
                        <ContentPresenter Margin="0,0,0,1"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=SearchViewAllResultsHoverBackground}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=SearchViewAllResultsPressedBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=searchStr, Path=Text}" Value="">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Taskbar -->
    <Style x:Key="CairoTaskbarBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TaskbarBottomBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarBottomBorder}" />
    </Style>
    <Style x:Key="CairoTaskbarTopBorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource CairoTaskbarBorderStyle}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="Background" Value="{DynamicResource ResourceKey=TaskbarTopBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarTopBorder}" />
    </Style>
    <Style x:Key="CairoTaskbarEndBorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource CairoTaskbarBorderStyle}">
        <Setter Property="BorderThickness" Value="0,1,1,0" />
        <Setter Property="CornerRadius" Value="0,8,0,0" />
        <Setter Property="Padding" Value="0" />
    </Style>
    <Style x:Key="CairoTaskbarEndTopBorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource CairoTaskbarTopBorderStyle}">
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="CornerRadius" Value="0,0,8,0" />
        <Setter Property="Padding" Value="0" />
    </Style>
    <Style x:Key="CairoTaskbarLeftBorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource CairoTaskbarEndBorderStyle}">
        <Setter Property="BorderThickness" Value="1,1,0,0" />
        <Setter Property="CornerRadius" Value="8,0,0,0" />
        <Setter Property="MinWidth" Value="9" />
    </Style>
    <Style x:Key="CairoTaskbarLeftTopBorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource CairoTaskbarEndTopBorderStyle}">
        <Setter Property="BorderThickness" Value="1,0,0,1" />
        <Setter Property="CornerRadius" Value="0,0,0,8" />
        <Setter Property="MinWidth" Value="9" />
    </Style>
    <Style x:Key="TaskbarListView" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=MenuItemForeground}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border UseLayoutRounding="true"
                                x:Name="Bd"
                                Background="{TemplateBinding Background}">
                        <ItemsPresenter Focusable="False" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                    Value="false">
                            <Setter Property="Background"
                                        TargetName="Bd"
                                        Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsGrouping"
                                    Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll"
                                        Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Quick Launch -->
    <Style x:Key="QuickLaunchListStyle" BasedOn="{StaticResource TaskbarListView}" TargetType="{x:Type ListView}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=quickLaunchList, Path=Items.Count}" Value="0">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CairoQuickLaunchButtonStyle"
        TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                        BorderThickness="0"
                        Margin="0"
                        Background="Transparent"
                        BorderBrush="Transparent">
                        <ContentPresenter Margin="5,1,5,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                    Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="White"
                                            ShadowDepth="0"
                                            Opacity="0.5" BlurRadius="7" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                    Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="White"
                                            ShadowDepth="0"
                                            Opacity="1" BlurRadius="7" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Taskbar window groups -->
    <Style x:Key="CairoTaskbarGroupStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderThickness="1,0,0,0" BorderBrush="{DynamicResource ResourceKey=TaskGroupBorder}" Margin="3,1,1,0">
                        <ItemsPresenter Margin="0,-1,0,0" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoTaskbarTopGroupStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderThickness="1,0,0,0" BorderBrush="{DynamicResource ResourceKey=TaskGroupBorder}" Margin="3,0,1,0">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Button Style for Taskbar -->
    <Style x:Key="CairoTaskbarButtonInactiveStyle"
        TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="FontFamily"
            Value="Segoe UI" />
        <Setter Property="FontSize"
            Value="12" />
        <Setter Property="Foreground"
            Value="White" />
        <Setter Property="HorizontalAlignment"
            Value="Stretch" />
        <Setter Property="VerticalAlignment"
            Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- this is the style that loads on default buttons -->
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="1,1,0,0"
                        Margin="0,0,0,0" Background="{DynamicResource ResourceKey=TaskbarItemInactiveBackground}" BorderBrush="{DynamicResource ResourceKey=TaskbarItemInactiveBorder}">
                        <ContentPresenter Margin="5,1,5,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBackground}" />
                            <Setter TargetName="Border"
                                Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactivePressedBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoTaskbarButtonActiveStyle"
        TargetType="{x:Type Button}" BasedOn="{StaticResource CairoTaskbarButtonInactiveStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="1,1,0,0"
                        Margin="0,0,0,0" Background="{DynamicResource ResourceKey=TaskbarItemActiveBackground}" BorderBrush="{DynamicResource ResourceKey=TaskbarItemActiveBorder}">
                        <ContentPresenter Margin="5,1,5,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemActiveHoverBackground}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemActivePressedBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoTaskbarButtonFlashingStyle"
        TargetType="{x:Type Button}" BasedOn="{StaticResource CairoTaskbarButtonInactiveStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="1,1,0,0"
                        Margin="0,0,0,0" Background="{DynamicResource ResourceKey=TaskbarItemFlashingBackground}" BorderBrush="{DynamicResource ResourceKey=TaskbarItemFlashingBorder}">
                        <ContentPresenter Margin="5,1,5,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource TaskbarFlashPulseCycle}" Name="SB1" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="SB1" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Storyboard="{StaticResource TaskbarFlashPulseCycle}"/>
                        </EventTrigger>
                        <Trigger Property="IsEnabled"
                			Value="false">
                            <Setter TargetName="Border"
                				Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemFlashingDisabledBackground}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                			Value="true">
                            <Setter TargetName="Border"
                				Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemFlashingHoverBackground}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                			Value="true">
                            <Setter TargetName="Border"
                				Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemFlashingPressedBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Style for task list -->
    <Style x:Key="CairoTaskListPopupStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuBackgroundGradient}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey=MenuBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="Padding" Value="0,3,0,3"/>
        <Setter Property="Effect" Value="{DynamicResource ResourceKey=MenuShadow}" />
    </Style>
    <Style x:Key="TaskListStyle" BasedOn="{StaticResource TaskbarListView}" TargetType="{x:Type ListView}">
        <Style.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <StackPanel Orientation="Horizontal" Margin="0,3">
                                <Border BorderThickness="0,0,1,0" BorderBrush="{DynamicResource ResourceKey=MenuBorderBrush}" Width="100" Margin="0,-3">
                                </Border>
                                <TextBlock Style="{StaticResource NoItemsTextBlock}" Padding="8,4,0,4" Width="350" Text="{Binding Path=(l10n:DisplayString.sTaskbar_Empty)}" />
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CairoTaskListButtonStyle"
        TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="FontFamily"
            Value="Segoe UI" />
        <Setter Property="FontSize"
            Value="12" />
        <Setter Property="Foreground"
            Value="{DynamicResource ResourceKey=MenuItemForeground}" />
        <Setter Property="Width"
            Value="350" />
        <Setter Property="Height"
            Value="24" />
        <Setter Property="VerticalAlignment"
            Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                        BorderThickness="0"
                            Background="Transparent"
                        Margin="0,0,0,0">
                        <ContentPresenter Margin="5,0,5,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuItemHoverGradient}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuItemHoverGradient}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Style for list button on taskbar -->
    <Style x:Key="CairoTaskbarButtonList"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="FontFamily"
            Value="Segoe UI" />
        <Setter Property="FontSize"
            Value="12" />
        <Setter Property="Foreground"
            Value="White" />
        <Setter Property="Width"
            Value="26" />
        <Setter Property="VerticalAlignment"
            Value="Stretch" />
        <Setter Property="Margin"
            Value="1,-1,-1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="0,8,0,0"
                        Margin="0" Background="Transparent" BorderBrush="Transparent">
                        <ContentPresenter Margin="0,1,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBackground}" />
                            <Setter TargetName="Border"
                                Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactivePressedBackground}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemActiveBackground}" />
                            <Setter TargetName="Border"
                                Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarItemActiveBorder}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoTaskbarTopButtonList"
        TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CairoTaskbarButtonList}">
        <Setter Property="Margin"
            Value="1,0,-1,-1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="0,0,8,0"
                        Margin="0" Background="Transparent" BorderBrush="Transparent">
                        <ContentPresenter Margin="0,1,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBackground}" />
                            <Setter TargetName="Border"
                                Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactivePressedBackground}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemActiveBackground}" />
                            <Setter TargetName="Border"
                                Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarItemActiveBorder}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoTaskbarButtonDesktopOverlay"
        TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CairoTaskbarButtonList}">
        <Setter Property="Margin"
            Value="-1,-1,0,0" />
        <Setter Property="Width"
            Value="26" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="8,0,0,0"
                        Margin="0" Background="Transparent" BorderBrush="Transparent">
                        <ContentPresenter Margin="0,1,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBackground}" />
                            <Setter TargetName="Border"
                                Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactivePressedBackground}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemActiveBackground}" />
                            <Setter TargetName="Border"
                                Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarItemActiveBorder}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoTaskbarTopButtonDesktopOverlay"
        TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CairoTaskbarButtonDesktopOverlay}">
        <Setter Property="Margin"
            Value="-1,0,0,-1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="0,0,0,8"
                        Margin="0" Background="Transparent" BorderBrush="Transparent">
                        <ContentPresenter Margin="0,1,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBackground}" />
                            <Setter TargetName="Border"
                                Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarItemInactiveHoverBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemInactivePressedBackground}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background" Value="{DynamicResource ResourceKey=TaskbarItemActiveBackground}" />
                            <Setter TargetName="Border"
                                Property="BorderBrush" Value="{DynamicResource ResourceKey=TaskbarItemActiveBorder}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Dialogs -->
    <Style x:Key="CairoWindowStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="12,7,12,17" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0"
                    EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="#FFFFFFFF"
                            Offset="0" />
                        <GradientStop Color="#FFEFEFEF"
                            Offset="1" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="Black" ShadowDepth="6" Direction="270" Opacity="0.5" BlurRadius="15" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoWindowContainer" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="12,7,12,17" />
    </Style>
    <Style x:Key="CairoButtonStyle"
        TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="FontFamily"
            Value="Corbel" />
        <Setter Property="FontSize"
            Value="14" />
        <Setter Property="MinWidth"
            Value="100" />
        <Setter Property="MinHeight"
            Value="30" />
        <Setter Property="VerticalAlignment"
            Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="5"
                        BorderBrush="#402e2e2e" Padding="15,0">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0"
                                EndPoint="0,1">
                                <GradientStop Color="#FFFFFFFF"
                                    Offset="0" />
                                <GradientStop Color="#FFDFDFDF"
                                    Offset="1" />
                            </LinearGradientBrush>
                        </Border.Background>
                        <ContentPresenter Margin="0,0,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                            Value="false">
                            <Setter TargetName="Border"
                                Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0"
                                        EndPoint="0,1">
                                        <GradientStop Color="Gray"
                                            Offset="0" />
                                        <GradientStop Color="DarkGray"
                                            Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0"
                                        EndPoint="0,1">
                                        <GradientStop Color="#FFDCE1E6"
                                            Offset="0" />
                                        <GradientStop Color="#FFC0C5C9"
                                            Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#4028292a" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0"
                                        EndPoint="0,1">
                                        <GradientStop Color="#FFc6cbcf"
                                            Offset="0" />
                                        <GradientStop Color="#FFadb2b5"
                                            Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#40242525" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Wizards -->
    <Style x:Key="WizardText" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Corbel" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Margin" Value="0,0,0,10" />
    </Style>

    <!-- Welcome -->
    <Style x:Key="WelcomeText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource WizardText}">
        <Setter Property="LineHeight" Value="20" />
        <Setter Property="Margin" Value="64,0,64,18" />
    </Style>
    <Style x:Key="WelcomeHeading" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource WelcomeText}">
        <Setter Property="FontSize" Value="33" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style x:Key="WelcomeSubHeading" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource WelcomeHeading}">
        <Setter Property="FontSize" Value="20" />
        <Setter Property="Margin" Value="64,0,64,2" />
    </Style>
    <Style x:Key="WelcomeSubText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource WelcomeText}">
        <Setter Property="Foreground" Value="#FF555555" />
    </Style>
   
    <!-- Stacks -->
    <Style x:Key="CairoStacksStyle"
        TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                        Background="Transparent"
                        BorderBrush="Transparent">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"
                                    SharedSizeGroup="MenuTextColumnGroup" />
                            </Grid.ColumnDefinitions>
                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                x:Name="HeaderHost"
                                RecognizesAccessKey="True"
                                ContentSource="Header" />
                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                Placement="Right"
                                x:Name="SubMenuPopup"
                                Focusable="false"
                                PopupAnimation="Slide"
                                AllowsTransparency="True">
                                <StackPanel>
                                    <Border x:Name="SubMenuBorderTop">
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="BorderBrush"
                                                Value="{DynamicResource ResourceKey=MenuTopBorderBrush}" />
                                                <Setter Property="BorderThickness"
                                                Value="0,1,0,0" />
                                            </Style>
                                        </Border.Style>
                                        <Border x:Name="SubMenuBorder">
                                            <Border.Style>
                                                <Style TargetType="{x:Type Border}">
                                                    <Setter Property="Background" Value="{DynamicResource ResourceKey=MenuBackgroundGradient}" />
                                                    <Setter Property="BorderBrush"
                                                    Value="{DynamicResource ResourceKey=MenuBorderBrush}" />
                                                    <Setter Property="BorderThickness"
                                                    Value="0,0,0,1" />
                                                    <Setter Property="Padding"
                                                    Value="0" />
                                                </Style>
                                            </Border.Style>
                                            <Grid x:Name="SubMenu"
                                            Grid.IsSharedSizeScope="True">
                                                <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                                <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                                            </Grid>
                                        </Border>
                                    </Border>
                                    <Image Source="{StaticResource MenubarShadow}" Stretch="Fill" Width="{DynamicResource {x:Static SystemParameters.MaximizedPrimaryScreenWidthKey}}" Height="16"/>
                                </StackPanel>
                            </Popup>
                        </Grid>
                    </Border>
                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role"
                            Value="TopLevelHeader">
                            <Setter Property="Padding"
                                Value="13,1,13,0" />
                            <Setter Property="Margin"
                                Value="0,-2,0,0" />
                            <Setter Property="Placement"
                                Value="Bottom"
                                TargetName="SubMenuPopup" />
                            <Setter Property="Height"
                                Value="22" />
                            <Setter Property="FontSize"
                                Value="14" />
                            <Setter Property="Effect" Value="{DynamicResource ResourceKey=MenuHeaderShadow}" />
                            <Setter Property="Foreground"
                                Value="{DynamicResource ResourceKey=MenuHeaderForeground}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="TopLevelHeader" />
                                <Condition Property="IsSubmenuOpen"
                                    Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderPressedGradient}" />
                            <Setter Property="Foreground"
                                Value="{DynamicResource ResourceKey=MenuItemForeground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="TopLevelHeader" />
                                <Condition Property="IsMouseOver"
                                    Value="True" />
                                <Condition Property="IsSubmenuOpen"
                                    Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuHeaderHoverBackground}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role"
                                    Value="TopLevelItem" />
                                <Condition Property="IsMouseOver"
                                    Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                TargetName="Border" Value="{DynamicResource ResourceKey=MenuItemHoverGradient}"/>
                        </MultiTrigger>
                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role"
                            Value="TopLevelItem">
                            <Setter Property="Padding"
                                Value="0,3,0,0" />
                            <Setter Property="MinHeight"
                                Value="24" />
                            <Setter Property="Foreground"
                                Value="{DynamicResource ResourceKey=MenuItemForeground}" />
                            <Setter Property="FontSize"
                                Value="12" />
                            <Setter Property="FontFamily"
                                Value="Segoe UI" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StackScrollButton"
        TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="FontFamily"
            Value="Webdings" />
        <Setter Property="Foreground"
            Value="#5fFFFFFF" />
        <Setter Property="FontSize"
            Value="11.5" />
        <Setter Property="Width"
            Value="20" />
        <Setter Property="Height"
            Value="20" />
        <Setter Property="VerticalAlignment"
            Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="10"
                        BorderBrush="#5fFFFFFF"
                        Background="#2fFFFFFF">
                        <ContentPresenter Margin="0,2,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                            Value="false">
                            <Setter TargetName="Border"
                                Property="Background" Value="#3FFFFFFF" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background"
                                Value="#2f555555" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background"
                                Value="#2f000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StackTopButton"
        TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="FontFamily"
            Value="Webdings" />
        <Setter Property="Foreground"
            Value="#5fFFFFFF" />
        <Setter Property="FontSize"
            Value="11.5" />
        <Setter Property="Width"
            Value="20" />
        <Setter Property="Height"
            Value="20" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="5,5,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border"
                        BorderThickness="1"
                        CornerRadius="10"
                        BorderBrush="#5fFFFFFF"
                        Background="#2fFFFFFF">
                        <ContentPresenter Margin="0,2,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                            Value="false">
                            <Setter TargetName="Border"
                                Property="Background" Value="#3FFFFFFF" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background"
                                Value="#2f555555" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                Property="Background"
                                Value="#2f000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StackScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <RepeatButton Grid.Column="0" Command="ScrollBar.PageLeftCommand" Style="{StaticResource StackScrollButton}" Content="3" />
                        <ScrollContentPresenter Grid.Column="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Margin="0,0,16,0" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" />
                        <RepeatButton Grid.Column="2" Command="ScrollBar.PageRightCommand" Style="{StaticResource StackScrollButton}" Margin="-32,0,0,0" Content="4" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Button Style for icons -->
    <Style x:Key="CairoFileButtonStyle"
        TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="FontFamily"
            Value="Segoe UI" />
        <Setter Property="FontSize"
            Value="12" />
        <Setter Property="Height"
            Value="85" />
        <Setter Property="MinWidth"
            Value="100" />
        <Setter Property="VerticalAlignment"
            Value="Center" />
        <Setter Property="FocusVisualStyle"
            Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentPresenter Margin="5,0,5,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoDesktopButtonStyle"
        TargetType="{x:Type Button}" BasedOn="{StaticResource CairoFileButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Margin="2,4,2,2" CornerRadius="3" BorderBrush="Transparent" BorderThickness="0,1,0,0">
                        <Border x:Name="Border2" CornerRadius="3" BorderBrush="Transparent" BorderThickness="0,0,0,1">
                            <ContentPresenter Margin="3"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ResourceKey=DesktopHoverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ResourceKey=DesktopHoverTopBorder}" />
                            <Setter TargetName="Border2" Property="BorderBrush" Value="{DynamicResource ResourceKey=DesktopHoverBottomBorder}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ResourceKey=DesktopPressedBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ResourceKey=DesktopPressedTopBorder}" />
                            <Setter TargetName="Border2" Property="BorderBrush" Value="{DynamicResource ResourceKey=DesktopPressedBottomBorder}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Folder Views -->
    <Style x:Key="DesktopFolderViewVerticalStyle" TargetType="ItemsControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                        <WrapPanel Orientation="Vertical" IsItemsHost="True" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Button MouseDoubleClick="btnFile_Click"
                                CommandParameter="{Binding Path=FullName}"
                                Style="{StaticResource CairoDesktopButtonStyle}" Height="97">
                        <DockPanel>
                            <Image Source="{Binding Path=LargeIcon, Mode=OneWay, FallbackValue={StaticResource NullIcon}, TargetNullValue={StaticResource NullIcon}}" Stretch="Uniform" Width="48" Height="48" DockPanel.Dock="Top" RenderOptions.BitmapScalingMode="LowQuality" />
                            <TextBox DockPanel.Dock="Bottom" Visibility="Collapsed" Text="{Binding Path=Name, Mode=OneWay}" Name="txtRename" Height="35" Width="80" Margin="5,0,5,3" LostFocus="txtRename_LostFocus" KeyUp="txtRename_KeyUp" TextWrapping="WrapWithOverflow" TextAlignment="Center" />
                            <Border DockPanel.Dock="Bottom" Name="bdrFilename">
                                <Border.Effect>
                                    <DropShadowEffect Color="Black"
                                                            ShadowDepth="2"
                                                                  Direction="270"
                                                            BlurRadius="4"
                                                            Opacity="1" />
                                </Border.Effect>
                                <TextBlock
                                        Text="{Binding Path=FriendlyName}"
                                        TextAlignment="Center"
                                        TextTrimming="CharacterEllipsis"
                                        TextWrapping="Wrap"
                                        Height="35"
                                        Width="80"
                                        Background="Transparent"
                                        Margin="5,0,5,3"
                                        Foreground="{DynamicResource ResourceKey=DesktopIconText}">
                                    <TextBlock.Effect>
                                        <DropShadowEffect Color="Black"
                                                        ShadowDepth="1"
                                                                  Direction="90"
                                                        Opacity="0.8" BlurRadius="2" />
                                    </TextBlock.Effect>
                                    <TextBlock.ToolTip>
                                        <ToolTip Content="{Binding Path=Name, Mode=OneWay}" />
                                    </TextBlock.ToolTip>
                                </TextBlock>
                            </Border>
                        </DockPanel>
                    </Button>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DesktopFolderViewVerticalSmallStyle" TargetType="ItemsControl" BasedOn="{StaticResource DesktopFolderViewVerticalStyle}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Button MouseDoubleClick="btnFile_Click"
                                CommandParameter="{Binding Path=FullName}"
                                Style="{StaticResource CairoDesktopButtonStyle}">
                        <DockPanel>
                            <Image Source="{Binding Path=Icon, Mode=OneWay, FallbackValue={StaticResource NullIcon}, TargetNullValue={StaticResource NullIcon}}" Stretch="Uniform" Width="32" Height="32" DockPanel.Dock="Top" RenderOptions.BitmapScalingMode="LowQuality" />
                            <TextBox DockPanel.Dock="Bottom" Visibility="Collapsed" Text="{Binding Path=Name, Mode=OneWay}" Name="txtRename" Height="35" Width="80" Margin="5,0,5,3" LostFocus="txtRename_LostFocus" KeyUp="txtRename_KeyUp" TextWrapping="WrapWithOverflow" TextAlignment="Center" />
                            <Border DockPanel.Dock="Bottom" Name="bdrFilename">
                                <Border.Effect>
                                    <DropShadowEffect Color="Black"
                                                            ShadowDepth="2"
                                                                  Direction="270"
                                                            BlurRadius="4"
                                                            Opacity="1" />
                                </Border.Effect>
                                <TextBlock
                                        Text="{Binding Path=FriendlyName}"
                                        TextAlignment="Center"
                                        TextTrimming="CharacterEllipsis"
                                        TextWrapping="Wrap"
                                        Height="35"
                                        Width="80"
                                        Background="Transparent"
                                        Margin="5,0,5,3"
                                        Foreground="{DynamicResource ResourceKey=DesktopIconText}">
                                    <TextBlock.Effect>
                                        <DropShadowEffect Color="Black"
                                                        ShadowDepth="1"
                                                                  Direction="90"
                                                        Opacity="0.8" BlurRadius="2" />
                                    </TextBlock.Effect>
                                    <TextBlock.ToolTip>
                                        <ToolTip Content="{Binding Path=Name, Mode=OneWay}" />
                                    </TextBlock.ToolTip>
                                </TextBlock>
                            </Border>
                        </DockPanel>
                    </Button>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DesktopFolderViewHorizontalStyle" TargetType="ItemsControl" BasedOn="{StaticResource DesktopFolderViewVerticalStyle}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Button MouseDoubleClick="btnFile_Click"
                                CommandParameter="{Binding Path=FullName}"
                                Style="{StaticResource CairoDesktopButtonStyle}" Height="64" Margin="9,0,8,5">
                        <DockPanel>
                            <Image Source="{Binding Path=LargeIcon, Mode=OneWay, FallbackValue={StaticResource NullIcon}, TargetNullValue={StaticResource NullIcon}}" Stretch="Uniform" Width="48" Height="48" DockPanel.Dock="Left" RenderOptions.BitmapScalingMode="LowQuality" />
                            <TextBox DockPanel.Dock="Right" Visibility="Collapsed" Text="{Binding Path=Name, Mode=OneWay}" Name="txtRename" Height="35" Width="130" Margin="5,0,5,3" LostFocus="txtRename_LostFocus" KeyUp="txtRename_KeyUp" TextWrapping="WrapWithOverflow" TextAlignment="Left" />
                            <Border DockPanel.Dock="Right" Name="bdrFilename" Height="36">
                                <Border.Effect>
                                    <DropShadowEffect Color="Black"
                                                            ShadowDepth="2"
                                                                  Direction="270"
                                                            BlurRadius="4"
                                                            Opacity="1" />
                                </Border.Effect>
                                <TextBlock
                                        Text="{Binding Path=FriendlyName}"
                                        TextAlignment="Left"
                                        TextTrimming="CharacterEllipsis"
                                        TextWrapping="Wrap"
                                        Width="130"
                                        Background="Transparent"
                                        Margin="5,0,5,3"
                                        Foreground="{DynamicResource ResourceKey=DesktopIconText}" VerticalAlignment="Center">
                                    <TextBlock.Effect>
                                        <DropShadowEffect Color="Black"
                                                        ShadowDepth="1"
                                                                  Direction="90"
                                                        Opacity="0.8" BlurRadius="2" />
                                    </TextBlock.Effect>
                                    <TextBlock.ToolTip>
                                        <ToolTip Content="{Binding Path=Name, Mode=OneWay}" />
                                    </TextBlock.ToolTip>
                                </TextBlock>
                            </Border>
                        </DockPanel>
                    </Button>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DesktopFolderViewHorizontalSmallStyle" TargetType="ItemsControl" BasedOn="{StaticResource DesktopFolderViewVerticalStyle}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Button MouseDoubleClick="btnFile_Click"
                                CommandParameter="{Binding Path=FullName}"
                                Style="{StaticResource CairoDesktopButtonStyle}" Height="48" Margin="9,0,8,5">
                        <DockPanel>
                            <Image Source="{Binding Path=Icon, Mode=OneWay, FallbackValue={StaticResource NullIcon}, TargetNullValue={StaticResource NullIcon}}" Stretch="Uniform" Width="32" Height="32" DockPanel.Dock="Left" RenderOptions.BitmapScalingMode="LowQuality" />
                            <TextBox DockPanel.Dock="Right" Visibility="Collapsed" Text="{Binding Path=Name, Mode=OneWay}" Name="txtRename" Height="35" Width="130" Margin="5,0,5,3" LostFocus="txtRename_LostFocus" KeyUp="txtRename_KeyUp" TextWrapping="WrapWithOverflow" TextAlignment="Left" />
                            <Border DockPanel.Dock="Right" Name="bdrFilename" Height="36">
                                <Border.Effect>
                                    <DropShadowEffect Color="Black"
                                                            ShadowDepth="2"
                                                                  Direction="270"
                                                            BlurRadius="4"
                                                            Opacity="1" />
                                </Border.Effect>
                                <TextBlock
                                        Text="{Binding Path=FriendlyName}"
                                        TextAlignment="Left"
                                        TextTrimming="CharacterEllipsis"
                                        TextWrapping="Wrap"
                                        Width="130"
                                        Background="Transparent"
                                        Margin="5,0,5,3"
                                        Foreground="{DynamicResource ResourceKey=DesktopIconText}" VerticalAlignment="Center">
                                    <TextBlock.Effect>
                                        <DropShadowEffect Color="Black"
                                                        ShadowDepth="1"
                                                                  Direction="90"
                                                        Opacity="0.8" BlurRadius="2" />
                                    </TextBlock.Effect>
                                    <TextBlock.ToolTip>
                                        <ToolTip Content="{Binding Path=Name, Mode=OneWay}" />
                                    </TextBlock.ToolTip>
                                </TextBlock>
                            </Border>
                        </DockPanel>
                    </Button>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FolderViewStyle" TargetType="ListView">
        <Setter Property="Height" Value="85" />
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.MaximizedPrimaryScreenWidthKey}}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListViewItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <ContentPresenter />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Button Click="btnFile_Click"
                                CommandParameter="{Binding Path=FullName}"
                                Style="{StaticResource CairoFileButtonStyle}">
                        <DockPanel>
                            <TextBox DockPanel.Dock="Bottom" Visibility="Collapsed" Text="{Binding Path=Name, Mode=OneWay}" Name="txtRename" Height="35" Width="80" Margin="5,0,5,3" LostFocus="txtRename_LostFocus" KeyUp="txtRename_KeyUp" TextWrapping="WrapWithOverflow" TextAlignment="Center" />
                            <Border DockPanel.Dock="Bottom" Name="bdrFilename">
                                <TextBlock
                                        Text="{Binding Path=FriendlyName}"
                                        TextAlignment="Center"
                                        TextTrimming="CharacterEllipsis"
                                        TextWrapping="Wrap"
                                        Height="35"
                                        Width="80"
                                        Background="Transparent"
                                        Margin="5,0,5,3"
                                        Foreground="{DynamicResource ResourceKey=StacksIconText}">
                                    <TextBlock.ToolTip>
                                        <ToolTip Content="{Binding Path=Name, Mode=OneWay}" />
                                    </TextBlock.ToolTip>
                                </TextBlock>
                            </Border>
                            <Image Source="{Binding Path=Icon, Mode=OneWay, FallbackValue={StaticResource NullIcon}, TargetNullValue={StaticResource NullIcon}}" Stretch="Uniform" Width="32" Height="32" RenderOptions.BitmapScalingMode="LowQuality" />
                        </DockPanel>
                        <Button.ContextMenu>
                            <ContextMenu Loaded="ctxFile_Loaded"
                                        Tag="{Binding Path=FullName}"
                                        Style="{StaticResource CairoContextMenuStyle}">
                                <ContextMenu.Resources>
                                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource CairoMenuItemStyle}">
                                        <EventSetter Event="Click" Handler="miVerb_Click" />
                                    </Style>
                                    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource CairoMenuSeparatorStyle}">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </Style>
                                </ContextMenu.Resources>
                            </ContextMenu>
                        </Button.ContextMenu>
                        <Button.ToolTip>
                            <ToolTip Content="{Binding Path=Name, Mode=OneWay}" />
                        </Button.ToolTip>
                    </Button>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <ScrollViewer Style="{StaticResource StackScrollViewer}" CanContentScroll="True" VerticalScrollBarVisibility="Disabled">
                        <VirtualizingStackPanel Orientation="Horizontal" IsItemsHost="True" Margin="0,4,0,0" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <TextBlock Style="{StaticResource NoItemsTextBlock}" HorizontalAlignment="Center" Text="{Binding Path=(l10n:DisplayString.sStacks_Empty)}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Scrollbars -->
    <Style x:Key="ScrollBarPageButton"
        TargetType="{x:Type RepeatButton}">
        <Setter Property="UseLayoutRounding"
            Value="True" />
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="IsTabStop"
            Value="false" />
        <Setter Property="Focusable"
            Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb"
        TargetType="{x:Type Thumb}">
        <Setter Property="UseLayoutRounding"
            Value="True" />
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="IsTabStop"
            Value="false" />
        <Setter Property="Focusable"
            Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="5"
                        BorderThickness="1">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="Background" Value="#33FFFFFF" />
                                <Setter Property="BorderBrush" Value="#55000000" />
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Trigger.Setters>
                                            <Setter Property="Background" Value="#55FFFFFF" />
                                            <Setter Property="BorderBrush" Value="#44000000" />
                                        </Trigger.Setters>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar"
        TargetType="{x:Type ScrollBar}">
        <Border Background="#22000000">
            <Track Name="PART_Track"
                IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                        Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"
                        Margin="3" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                        Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
        </Border>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar"
        TargetType="{x:Type ScrollBar}">
        <Border Background="#22000000">
            <Track Name="PART_Track"
                IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                        Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"
                        Margin="3" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}"
                        Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
        </Border>
    </ControlTemplate>
    <Style x:Key="{x:Type ScrollBar}"
        TargetType="{x:Type ScrollBar}">
        <Setter Property="UseLayoutRounding"
            Value="True" />
        <Setter Property="OverridesDefaultStyle"
            Value="True" />
        <Style.Triggers>
            <Trigger Property="Orientation"
                Value="Horizontal">
                <Setter Property="Width"
                    Value="Auto" />
                <Setter Property="Height"
                    Value="18" />
                <Setter Property="Template"
                    Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation"
                Value="Vertical">
                <Setter Property="Width"
                    Value="18" />
                <Setter Property="Height"
                    Value="Auto" />
                <Setter Property="Template"
                    Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Programs menu styles -->
    <Style x:Key="ProgramsMenuButton" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ProgramsMenuCategoryForeground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Height" Value="24" />
        <Setter Property="MinWidth" Value="140" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" BorderThickness="0">
                        <ContentPresenter Margin="10,0,10,2"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ResourceKey=ProgramsMenuCategoryHoverBackground}" />
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=MenuItemForeground}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ResourceKey=MenuItemHoverGradient}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgramsTabControl" TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0,3" />
        <Setter Property="Margin" Value="0,-3" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <DockPanel Grid.Column="1">
                            <TabPanel x:Name="HeaderPanel"
                            DockPanel.Dock="Top"
                            Panel.ZIndex="1"
                            Margin="0,3"
                            IsItemsHost="True"
                            Background="Transparent" />
                            <StackPanel Orientation="Vertical" DockPanel.Dock="Bottom" Margin="0,12,0,3" VerticalAlignment="Bottom">
                                <Button Style="{StaticResource ProgramsMenuButton}" Name="btnAppGrabber" Click="btnAppGrabber_Click" Content="{Binding Path=(l10n:DisplayString.sAppGrabber)}" />
                                <Button Style="{StaticResource ProgramsMenuButton}" Name="btnUninstallApps" Click="btnUninstallApps_Click" Content="{Binding Path=(l10n:DisplayString.sProgramsMenu_UninstallAProgram)}" />
                            </StackPanel>
                        </DockPanel>
                        <Border x:Name="Border"
                      Grid.Column="0"
                      BorderThickness="0,0,1,0"
                                BorderBrush="{DynamicResource ResourceKey=MenuBorderBrush}"
                                Background="Transparent">
                            <ContentPresenter
                                  Margin="0,3"
                                  ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgramsTabItem" TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey=MenuItemForeground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Height" Value="24" />
        <Setter Property="MinWidth" Value="140" />
        <Setter Property="MaxWidth" Value="220" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Path=DisplayName}" TextTrimming="CharacterEllipsis" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Name="Tab" Background="Transparent">
                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Left"
                                        ContentSource="Header"
                                        Margin="10,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Tab" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Tab" Property="Background" Value="{DynamicResource ResourceKey=ProgramsMenuCategoryHoverBackground}" />
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=MenuItemForeground}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=MenuItemForeground}" />
                            <Setter Property="FontWeight" Value="SemiBold" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                    Value="False" />
                                <Condition SourceName="Tab" Property="IsMouseOver"
                                    Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ProgramsMenuCategoryForeground}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ShowInMenu}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey=MenuItemForeground}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey=ProgramsMenuCategoryForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Calendar -->
    <Style x:Key="CairoCalendarItemStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock Foreground="#FFFFFFFF" FontWeight="Normal" FontSize="12" HorizontalAlignment="Center" Margin="0,5,0,5" Text="{Binding}" VerticalAlignment="Center"/>
                        </DataTemplate>
                    </ControlTemplate.Resources>

                    <Grid x:Name="PART_Root">
                        <Grid.Resources>
                            <SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF"/>
                        </Grid.Resources>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border BorderThickness="0" Background="Transparent">
                            <Border BorderBrush="#FFFFFFFF" BorderThickness="0">
                                <Grid>
                                    <Grid.Resources>
                                        <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Duration="0" To="#FFA9C822" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>

                                                <Rectangle Fill="Transparent" Opacity="1" Stretch="Fill"/>

                                                <Grid>
                                                    <Path x:Name="path" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z" Fill="#FF528cec" HorizontalAlignment="Left" Height="10" Margin="5,-6,0,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>

                                        <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Duration="0" To="#FFA9C822" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>

                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>

                                                <Rectangle Fill="Transparent" Opacity="1" Stretch="Fill"/>

                                                <Grid>
                                                    <Path x:Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z" Fill="#FF528cec" HorizontalAlignment="Right" Height="10" Margin="0,-6,5,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>

                                        <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="MouseOver">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To=".7" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent"/>
                                                            </Storyboard>
                                                        </VisualState>

                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>

                                                <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="White" TextElement.FontFamily="Segoe UI" Margin="1,3,1,9"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Grid.Resources>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <Grid Grid.Row="0" Grid.ColumnSpan="3" HorizontalAlignment="Stretch">
                                        <Button x:Name="PART_PreviousButton" Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" Grid.Row="0" Margin="20,0,0,0" Template="{StaticResource PreviousButtonTemplate}" Width="28"/>
                                        <Button x:Name="PART_HeaderButton" Grid.Column="1" FontWeight="Normal" Focusable="False" FontSize="12" HorizontalAlignment="Center" Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}" VerticalAlignment="Center" />
                                        <Button x:Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" Grid.Row="0" Margin="0,0,20,0"  Template="{StaticResource NextButtonTemplate}" Width="28"/>
                                    </Grid>
                                    <Grid x:Name="PART_MonthView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-1,6,6" Grid.Row="1" Visibility="Visible">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                    </Grid>

                                    <Grid x:Name="PART_YearView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-3,7,6" Grid.Row="1" Visibility="Hidden">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Border>

                        <Rectangle x:Name="PART_DisabledVisual" Fill="{StaticResource DisabledColor}" Opacity="0" RadiusY="2" RadiusX="2" Stretch="Fill" Stroke="{StaticResource DisabledColor}" StrokeThickness="1" Visibility="Collapsed"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible" />
                        </Trigger>

                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoCalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="28" />
        <Setter Property="MinHeight" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarDayButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="Opacity" To=".35" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active" />
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[2].(GradientStop.Color)" To="#33FFFFFF" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[3].(GradientStop.Color)" To="#33FFFFFF" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="RegularDay"  />
                                <VisualState x:Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TodayBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[1].(GradientStop.Offset)" To="1" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[2].(GradientStop.Offset)" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="NormalDay" />
                                <VisualState x:Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="BlackoutVisual" Storyboard.TargetProperty="Opacity" To=".2" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Rectangle x:Name="TodayBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="#FF528cec" />
                        <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}" />
                        <Rectangle x:Name="Background" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}" />

                        <ContentControl x:Name="Content" IsTabStop="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontSize="{TemplateBinding FontSize}" Margin="5,1,5,1">
                            <ContentControl.Foreground>
                                <LinearGradientBrush>
                                    <GradientStop Offset="0" Color="White" />
                                    <GradientStop Offset="0" Color="White" />
                                    <GradientStop Offset="0" Color="White" />
                                    <GradientStop Offset="1" Color="White" />
                                </LinearGradientBrush>
                            </ContentControl.Foreground>
                        </ContentControl>

                        <Path x:Name="BlackoutVisual" Opacity="0" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" Fill="#FF000000" Stretch="Fill" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z" />
                        <Rectangle x:Name="FocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1" RadiusY="1" Stroke="#FF6DBDD1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoCalendarButtonStyle" TargetType="{x:Type CalendarButton}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="Opacity" To=".35" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active" />
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[2].(GradientStop.Color)" To="#33FFFFFF" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[3].(GradientStop.Color)" To="#33FFFFFF" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="RegularDay"  />
                                <VisualState x:Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TodayBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[1].(GradientStop.Offset)" To="1" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[2].(GradientStop.Offset)" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="NormalDay" />
                                <VisualState x:Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="BlackoutVisual" Storyboard.TargetProperty="Opacity" To=".2" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Rectangle x:Name="TodayBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="#FF528cec" />
                        <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}" />
                        <Rectangle x:Name="Background" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}" />

                        <ContentControl x:Name="Content" IsTabStop="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontSize="{TemplateBinding FontSize}" Margin="5,1,5,1">
                            <ContentControl.Foreground>
                                <LinearGradientBrush>
                                    <GradientStop Offset="0" Color="White" />
                                    <GradientStop Offset="0" Color="White" />
                                    <GradientStop Offset="0" Color="White" />
                                    <GradientStop Offset="1" Color="White" />
                                </LinearGradientBrush>
                            </ContentControl.Foreground>
                        </ContentControl>

                        <Path x:Name="BlackoutVisual" Opacity="0" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" Fill="#FF000000" Stretch="Fill" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z" />
                        <Rectangle x:Name="FocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1" RadiusY="1" Stroke="#FF6DBDD1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CairoCalendarStyle" TargetType="{x:Type Calendar}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CalendarButtonStyle" Value="{DynamicResource CairoCalendarButtonStyle}"/>
        <Setter Property="CalendarDayButtonStyle" Value="{DynamicResource CairoCalendarDayButtonStyle}"/>
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                        <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{StaticResource CairoCalendarItemStyle}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Button Style for Systray Expander -->
    <Style x:Key="CairoSystrayExpanderStyle"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="Height"
            Value="22" />
        <Setter Property="Foreground"
            Value="{DynamicResource ResourceKey=SysTrayExpanderColor}" />
        <Setter Property="FontSize"
            Value="11" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                        BorderThickness="0"
                        Margin="0,0,0,0"
                        Background="Transparent"
                        BorderBrush="Transparent" Opacity="0.7">
                        <Path x:Name="Path" Margin="5,-2,5,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 6 0 L 6 8 L 0 4 Z" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                            Value="true">
                            <Setter TargetName="Border"
                                    Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="White"
                                            ShadowDepth="0"
                                            Opacity="0.5" BlurRadius="7" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                            Value="true">
                            <Setter TargetName="Border"
                                    Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="White"
                                            ShadowDepth="0"
                                            Opacity="1" BlurRadius="7" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                            Value="true">
                            <Setter TargetName="Path" Property="Data" Value="M 0 0 L 6 4 L 0 8 Z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
